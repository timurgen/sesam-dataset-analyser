"""
Simple diff analyzer for reports generated by /api/datasets call
"""
import sys
import json
from typing import Union


def extract_ids(input_l: list) -> list:
    """
    function to extract id's from list of data set entities
    :param input_l:
    :return:
    """
    result_l = []

    for id_a in input_l:
        result_l.append(id_a.get('_id'))

    return result_l


def get_dataset_by_id(_id: str, dataset_l: list) -> Union[dict, None]:
    """
    returns data set with given id
    :param _id: str id
    :param dataset_l: list of data sets
    :return: data set with given id or None otherwise
    """
    for item in dataset_l:
        if _id == item.get('_id'):
            return item
    return None


def list_intersection(list_a: list, list_b: list) -> list:
    """
    returns list with id's which exists in both data sets
    :param list_a: first list of dictionaries with Sesam data set info
    :param list_b: first list of dictionaries with Sesam data set info
    :return: list with id which exists in both data sets
    """
    list_id_a = extract_ids(list_a)
    list_id_b = extract_ids(list_b)

    return list(set(list_id_a) & set(list_id_b))


def list_diff(list_a: list, list_b: list) -> list:
    """
    returns list of id's which exist in list_a but not in list_b
    :param list_a: first list to compare
    :param list_b: second list to compare
    :return: list of strings with id's unique for list_a
    """
    list_id_a = extract_ids(list_a)
    list_id_b = extract_ids(list_b)

    return [item for item in list_id_a if item not in list_id_b]


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: main.py file_1.json file_2.json")
        exit(1)

    INPUT_DATASET_A = json.load(open(sys.argv[1]))
    INPUT_DATASET_B = json.load(open(sys.argv[2]))

    COMMON_IDS = list_intersection(INPUT_DATASET_A, INPUT_DATASET_B)
    IDS_EXIST_ONLY_IN_A = list_diff(INPUT_DATASET_A, INPUT_DATASET_B)
    IDS_EXIST_ONLY_IN_B = list_diff(INPUT_DATASET_B, INPUT_DATASET_A)

    COMMON_IDS.sort()
    IDS_EXIST_ONLY_IN_A.sort()
    IDS_EXIST_ONLY_IN_B.sort()

    RESULT_SET_COMMON = []
    # we take first entities which exists in both data sets
    for _id in COMMON_IDS:
        dataset_a = get_dataset_by_id(_id, INPUT_DATASET_A)
        dataset_b = get_dataset_by_id(_id, INPUT_DATASET_B)

        assert dataset_a
        assert dataset_b

        RESULT_SET_COMMON.append({
            "id": _id,
            "storage_a": dataset_a.get('storage'),
            "storage_b": dataset_b.get('storage'),
            "runtime_a": dataset_a.get('runtime'),
            "runtime_b": dataset_b.get('runtime'),
            "storage_diff": dataset_b.get('storage').get('total') - dataset_a.get('storage').get(
                'total')
        })

    print(json.dumps(sorted(RESULT_SET_COMMON, key=lambda i: i['storage_diff']), indent=4))

    print(IDS_EXIST_ONLY_IN_A)
    print(IDS_EXIST_ONLY_IN_B)

    DISAPPEARED = 0
    APPEARED = 0

    for result_item in RESULT_SET_COMMON:
        if result_item.get('storage_diff') < 0:
            DISAPPEARED = DISAPPEARED + abs(result_item.get('storage_diff'))
        if result_item.get('storage_diff') > 0:
            APPEARED = APPEARED + result_item.get('storage_diff')

    print("Disappeared bytes total: {}, loaded bytes total: {}".format(DISAPPEARED, APPEARED))
